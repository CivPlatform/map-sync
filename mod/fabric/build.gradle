plugins {
	id "com.github.johnrengelman.shadow" version "7.0.0"
}

architectury {
	platformSetupLoomIde()
	fabric()
}

configurations {
	common
	shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
	compileClasspath.extendsFrom common
	runtimeClasspath.extendsFrom common
	developmentFabric.extendsFrom common
}

dependencies {
	modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
	modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"

	common(project(path: ":common", configuration: "namedElements")) { transitive false }
	shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }

	minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
	mappings loom.officialMojangMappings()

	implementation "org.java-websocket:Java-WebSocket:${rootProject.websocket_version}"
	shadowCommon "org.java-websocket:Java-WebSocket:${rootProject.websocket_version}"

	modCompileOnly "curse.maven:journeymap-32274:3796377" // version 1.18.2-5.8.4-fabric
	modCompileOnly files("../libs/voxelmap-1.18.2-1.11.2.jar")
	//Xaero's Minimap version - v22.8.2 for Fabric 1.18.2
	//https://www.curseforge.com/minecraft/mc-mods/xaeros-minimap/files/3798916
	modCompileOnly "curse.maven:xaeros-minimap-263420:3798916"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

shadowJar {
	configurations = [project.configurations.shadowCommon]
	classifier "dev-shadow"
}

remapJar {
	input.set shadowJar.archiveFile
	dependsOn shadowJar
	classifier "fabric"
}

jar {
	classifier "dev"
}

sourcesJar {
	def commonSources = project(":common").sourcesJar
	dependsOn commonSources
	from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
	withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
		skip()
	}
}

publishing {
	publications {
		mavenFabric(MavenPublication) {
			artifactId = rootProject.archives_base_name + "-" + project.name
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
	}
}

task cleanJar(type: Delete) {
	delete fileTree('../dist') {
		include "*-fabric.jar"
	}
}

task copyJar(type: Copy) {
	from remapJar
	into '../dist'
}

build.dependsOn copyJar
copyJar.dependsOn cleanJar
